apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: network-up-
  labels:
    workflows.argoproj.io/archive-strategy: "false"
  annotations:
    workflows.argoproj.io/description: |
      This is a port of 'network.sh up -ca -channel -chaincode ...' to Argo

spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 8737 #; any non-root user

  entrypoint: network-up

  templates:
    - name: network-up
      steps:
        - - name: ahoy-fabric
            inline:
              container:
                image: docker/whalesay:latest
                command: [cowsay]
                args: ["Ahoy, Fabric!"]

        - - name: start-cas
            template: start-cas

        - - name: start-orderers
            template: start-orderers
        
          - name: start-peers
            template: start-peers

    - name: start-cas
      inputs:
        parameters:
          - name: STORAGE_CLASS
            default: standard
          - name: INGRESS_DOMAIN
            default: localho.st
          - name: CA_IMAGE
            default: hyperledger/fabric-ca
          - name: CA_IMAGE_LABEL
            default: 1.5.4
          - name: INIT_IMAGE
            default: registry.access.redhat.com/ubi8/ubi-minimal
          - name: INIT_IMAGE_LABEL
            default: latest
          - name: FABRIC_VERSION
            default: 2.4.4
          - name: FABRIC_CA_VERSION
            default: 1.5.4
      steps:
        - - name: org0-ca
            inline:
              resource:
                action: apply
                successCondition: status.type == Deployed
                manifest: |
                  apiVersion: ibp.com/v1beta1
                  kind: IBPCA
                  metadata:
                    name: org0-ca
                  spec:
                    action:
                      renew: {}
                    configoverride:
                      ca:
                        affiliations:
                          org1:
                            - department1
                            - department2
                          org2:
                            - department1
                        registry:
                          identities:
                            - name: admin
                              pass: adminpw
                              type: client
                              attrs:
                                hf.Registrar.Roles: "*"
                                hf.Registrar.DelegateRoles: "*"
                                hf.Revoker: true
                                hf.IntermediateCA: true
                                hf.GenCRL: true
                                hf.Registrar.Attributes: "*"
                                hf.AffiliationMgr: true
                            - name: orderer1
                              pass: orderer1pw
                              type: orderer
                            - name: orderer2
                              pass: orderer2pw
                              type: orderer
                            - name: orderer3
                              pass: orderer3pw
                              type: orderer
                            - name: org0admin
                              pass: org0adminpw
                              type: admin
                        debug: true
                        signing:
                          default:
                            expiry: 87600h0m0s
                      tlsca:
                        affiliations:
                          org1:
                            - department1
                            - department2
                          org0:
                            - department1
                        registry:
                          identities:
                            - name: admin
                              pass: adminpw
                              type: client # todo: shouldn't this be an admin?
                              attrs:
                                hf.Registrar.Roles: "*"
                                hf.Registrar.DelegateRoles: "*"
                                hf.Revoker: true
                                hf.IntermediateCA: true
                                hf.GenCRL: true
                                hf.Registrar.Attributes: "*"
                                hf.AffiliationMgr: true
                            - name: orderer1
                              pass: orderer1pw
                              type: orderer
                            - name: orderer2
                              pass: orderer2pw
                              type: orderer
                            - name: orderer3
                              pass: orderer3pw
                              type: orderer
                            - name: org0admin
                              pass: org0adminpw
                              type: admin

                        debug: true
                        signing:
                          default:
                            expiry: 87600h0m0s
                    customNames:
                      pvc: {}
                    domain: "{{inputs.parameters.INGRESS_DOMAIN}}"
                    images:
                      caImage: {{inputs.parameters.CA_IMAGE}}
                      caTag: {{inputs.parameters.CA_IMAGE_LABEL}}
                      caInitImage: {{inputs.parameters.INIT_IMAGE}}
                      caInitTag: {{inputs.parameters.INIT_IMAGE_LABEL}}
                    ingress:
                      class: ""
                      tlsSecretName: ""
                    license:
                      accept: true
                    replicas: 1
                    resources:
                      ca:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                      init:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                    service:
                      type: ClusterIP
                    storage:
                      ca:
                        class: "{{inputs.parameters.STORAGE_CLASS}}"
                        size: 100M
                    version: {{inputs.parameters.FABRIC_CA_VERSION}}


          - name: org1-ca
            inline:
              resource:
                action: apply
                successCondition: status.type == Deployed
                manifest: |
                  apiVersion: ibp.com/v1beta1
                  kind: IBPCA
                  metadata:
                    name: org1-ca
                  spec:
                    action:
                      renew: {}
                    configoverride:
                      ca:
                        affiliations:
                          org1:
                            - department1
                            - department2
                          org2:
                            - department1
                        registry:
                          identities:
                            - name: admin
                              pass: adminpw
                              type: client
                              attrs:
                                hf.Registrar.Roles: "*"
                                hf.Registrar.DelegateRoles: "*"
                                hf.Revoker: true
                                hf.IntermediateCA: true
                                hf.GenCRL: true
                                hf.Registrar.Attributes: "*"
                                hf.AffiliationMgr: true
                            - name: peer1
                              pass: peer1pw
                              type: peer
                            - name: peer2
                              pass: peer2pw
                              type: peer
                            - name: org1admin
                              pass: org1adminpw
                              type: admin
                        debug: true
                        signing:
                          default:
                            expiry: 87600h0m0s
                      tlsca:
                        affiliations:
                          org1:
                            - department1
                            - department2
                          org2:
                            - department1
                        registry:
                          identities:
                            - name: admin
                              pass: adminpw
                              type: client # todo: shouldn't this be an admin?
                              attrs:
                                hf.Registrar.Roles: "*"
                                hf.Registrar.DelegateRoles: "*"
                                hf.Revoker: true
                                hf.IntermediateCA: true
                                hf.GenCRL: true
                                hf.Registrar.Attributes: "*"
                                hf.AffiliationMgr: true
                            - name: peer1
                              pass: peer1pw
                              type: peer
                            - name: peer2
                              pass: peer2pw
                              type: peer
                            - name: org1admin
                              pass: org1adminpw
                              type: admin
                        debug: true
                        signing:
                          default:
                            expiry: 87600h0m0s
                    customNames:
                      pvc: {}
                    domain: "{{inputs.parameters.INGRESS_DOMAIN}}"
                    images:
                      caImage: {{inputs.parameters.CA_IMAGE}}
                      caTag: {{inputs.parameters.CA_IMAGE_LABEL}}
                      caInitImage: {{inputs.parameters.INIT_IMAGE}}
                      caInitTag: {{inputs.parameters.INIT_IMAGE_LABEL}}
                    ingress:
                      class: ""
                      tlsSecretName: ""
                    license:
                      accept: true
                    replicas: 1
                    resources:
                      ca:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                      init:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                    service:
                      type: ClusterIP
                    storage:
                      ca:
                        class: "{{inputs.parameters.STORAGE_CLASS}}"
                        size: 100M
                    version: {{inputs.parameters.FABRIC_CA_VERSION}}

          - name: org2-ca
            inline:
              resource:
                action: apply
                successCondition: status.type == Deployed
                manifest: |
                  apiVersion: ibp.com/v1beta1
                  kind: IBPCA
                  metadata:
                    name: org2-ca
                  spec:
                    action:
                      renew: {}
                    configoverride:
                      ca:
                        affiliations:
                          org1:
                            - department1
                            - department2
                          org2:
                            - department1
                        registry:
                          identities:
                            - name: admin
                              pass: adminpw
                              type: client
                              attrs:
                                hf.Registrar.Roles: "*"
                                hf.Registrar.DelegateRoles: "*"
                                hf.Revoker: true
                                hf.IntermediateCA: true
                                hf.GenCRL: true
                                hf.Registrar.Attributes: "*"
                                hf.AffiliationMgr: true
                            - name: peer1
                              pass: peer1pw
                              type: peer
                            - name: peer2
                              pass: peer2pw
                              type: peer
                            - name: org2admin
                              pass: org2adminpw
                              type: admin
                        debug: true
                        signing:
                          default:
                            expiry: 87600h0m0s
                      tlsca:
                        affiliations:
                          org1:
                            - department1
                            - department2
                          org2:
                            - department1
                        registry:
                          identities:
                            - name: admin
                              pass: adminpw
                              type: client # todo: shouldn't this be an admin?
                              attrs:
                                hf.Registrar.Roles: "*"
                                hf.Registrar.DelegateRoles: "*"
                                hf.Revoker: true
                                hf.IntermediateCA: true
                                hf.GenCRL: true
                                hf.Registrar.Attributes: "*"
                                hf.AffiliationMgr: true
                            - name: peer1
                              pass: peer1pw
                              type: peer
                            - name: peer2
                              pass: peer2pw
                              type: peer
                            - name: org2admin
                              pass: org2adminpw
                              type: admin
                        debug: true
                        signing:
                          default:
                            expiry: 87600h0m0s
                    customNames:
                      pvc: {}
                    domain: "{{inputs.parameters.INGRESS_DOMAIN}}"
                    images:
                      caImage: {{inputs.parameters.CA_IMAGE}}
                      caTag: {{inputs.parameters.CA_IMAGE_LABEL}}
                      caInitImage: {{inputs.parameters.INIT_IMAGE}}
                      caInitTag: {{inputs.parameters.INIT_IMAGE_LABEL}}
                    ingress:
                      class: ""
                      tlsSecretName: ""
                    license:
                      accept: true
                    replicas: 1
                    resources:
                      ca:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                      init:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                    service:
                      type: ClusterIP
                    storage:
                      ca:
                        class: "{{inputs.parameters.STORAGE_CLASS}}"
                        size: 100M
                    version: {{inputs.parameters.FABRIC_CA_VERSION}}

    - name: start-orderers
      inputs:
        parameters:
          - name: STORAGE_CLASS
            default: standard
          - name: INGRESS_DOMAIN
            default: localho.st
          - name: KUBE_DNS_DOMAIN
            default: test-network.svc.cluster.local
          - name: CA_IMAGE
            default: hyperledger/fabric-ca
          - name: CA_IMAGE_LABEL
            default: 1.5.4
          - name: INIT_IMAGE
            default: registry.access.redhat.com/ubi8/ubi-minimal
          - name: INIT_IMAGE_LABEL
            default: latest
          - name: FABRIC_VERSION
            default: 2.4.4
          - name: FABRIC_CA_VERSION
            default: 1.5.4
          - name: ORG0_CA_CERT
            default: xyzzy
          - name: ORDERER_IMAGE
            default: hyperledger/fabric-orderer
          - name: ORDERER_IMAGE_LABEL
            default: 2.4.4
      steps:
        - - name: fetch-cert
            inline:
              script:
                image: localhost:5000/stepper
                command: [bash]
                source: |
                  kubectl -n test-network get cm/org0-ca-connection-profile -o json | jq -r .binaryData.\"profile.json\" | base64 -d | jq -r .tls.cert

        - - name: org0-orderers
            inline:
              resource:
                action: apply
                successCondition: status.type == Deployed
                manifest: |
                  apiVersion: ibp.com/v1beta1
                  kind: IBPOrderer
                  metadata:
                    name: org0-orderers
                  spec:
                    version: "{{inputs.parameters.FABRIC_VERSION}}"
                    domain: "{{inputs.parameters.INGRESS_DOMAIN}}"
                    license:
                      accept: true
                    action:
                      enroll: {}
                      reenroll: {}
                    clusterSize: 3
                    clusterconfigoverride:
                      - general:
                          keepalive:
                            serverMinInterval: 61s
                      - general:
                          keepalive:
                            serverMinInterval: 61s
                      - general:
                          keepalive:
                            serverMinInterval: 61s
                    clustersecret:
                      - enrollment:
                          component:
                            caname: ca
                            cahost: test-network-org0-ca-ca.{{inputs.parameters.INGRESS_DOMAIN}}
                            caport: "443"
                            catls:
                              cacert: "{{steps.fetch-cert.outputs.result}}"
                            enrollid: "orderer1"
                            enrollsecret: "orderer1pw"
                          tls:
                            caname: tlsca
                            cahost: test-network-org0-ca-ca.{{inputs.parameters.INGRESS_DOMAIN}}
                            caport: "443"
                            catls:
                              cacert: "{{steps.fetch-cert.outputs.result}}"
                            enrollid: "orderer1"
                            enrollsecret: "orderer1pw"
                            csr:
                              hosts:
                                - "org0-orderersnode1"
                                - "org0-orderersnode1.{{inputs.parameters.KUBE_DNS_DOMAIN}}"
                      - enrollment:
                          component:
                            caname: ca
                            cahost: test-network-org0-ca-ca.{{inputs.parameters.INGRESS_DOMAIN}}
                            caport: "443"
                            catls:
                              cacert: "{{steps.fetch-cert.outputs.result}}"
                            enrollid: "orderer2"
                            enrollsecret: "orderer2pw"
                          tls:
                            caname: tlsca
                            cahost: test-network-org0-ca-ca.{{inputs.parameters.INGRESS_DOMAIN}}
                            caport: "443"
                            catls:
                              cacert: "{{steps.fetch-cert.outputs.result}}"
                            enrollid: "orderer2"
                            enrollsecret: "orderer2pw"
                            csr:
                              hosts:
                                - "org0-orderersnode2"
                                - "org0-orderersnode2.{{inputs.parameters.KUBE_DNS_DOMAIN}}"
                      - enrollment:
                          component:
                            caname: ca
                            cahost: test-network-org0-ca-ca.{{inputs.parameters.INGRESS_DOMAIN}}
                            caport: "443"
                            catls:
                              cacert: "{{steps.fetch-cert.outputs.result}}"
                            enrollid: "orderer3"
                            enrollsecret: "orderer3pw"
                          tls:
                            caname: tlsca
                            cahost: test-network-org0-ca-ca.{{inputs.parameters.INGRESS_DOMAIN}}
                            caport: "443"
                            catls:
                              cacert: "{{steps.fetch-cert.outputs.result}}"
                            enrollid: "orderer3"
                            enrollsecret: "orderer3pw"
                            csr:
                              hosts:
                                - "org0-orderersnode3"
                                - "org0-orderersnode3.{{inputs.parameters.KUBE_DNS_DOMAIN}}"

                    customNames:
                      pvc: {}
                    images:
                      ordererInitImage: {{inputs.parameters.INIT_IMAGE}}
                      ordererInitTag: {{inputs.parameters.INIT_IMAGE_LABEL}}
                      ordererImage: {{inputs.parameters.ORDERER_IMAGE}}
                      ordererTag: {{inputs.parameters.ORDERER_IMAGE_LABEL}}
                      grpcwebImage: ghcr.io/hyperledger-labs/grpc-web
                      grpcwebTag: latest
                    ingress:
                      class: ""
                      tlsSecretName: ""
                    mspID: OrdererMSP
                    ordererType: etcdraft
                    orgName: OrdererOrg
                    useChannelLess: true
                    systemChannelName: testchainid
                    resources:
                      init:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                      orderer:
                        limits:
                          cpu: 600m
                          memory: 1200M
                        requests:
                          cpu: 10m
                          memory: 10M
                      proxy:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                    service:
                      type: ClusterIP
                    storage:
                      orderer:
                        class: "{{inputs.parameters.STORAGE_CLASS}}"
                        size: 5G



    - name: start-peers
      steps:
        - - name: org1-peer1
            template: start-peer
            arguments:
              parameters:
                - name: orgnum
                  value: 1
                - name: peer
                  value: peer1

          - name: org1-peer2
            template: start-peer
            arguments:
              parameters:
                - name: orgnum
                  value: 1
                - name: peer
                  value: peer2

          - name: org2-peer1
            template: start-peer
            arguments:
              parameters:
                - name: orgnum
                  value: 2
                - name: peer
                  value: peer1

          - name: org2-peer2
            template: start-peer
            arguments:
              parameters:
                - name: orgnum
                  value: 2
                - name: peer
                  value: peer2



    - name: start-peer
      inputs:
        parameters:
          - name: orgnum
          - name: peer
          - name: FABRIC_VERSION
            default: 2.4.4
          - name: INGRESS_DOMAIN
            default: localho.st
          - name: INIT_IMAGE
            default: registry.access.redhat.com/ubi8/ubi-minimal
          - name: INIT_IMAGE_LABEL
            default: latest
          - name: KUBE_DNS_DOMAIN
            default: test-network.svc.cluster.local
          - name: STORAGE_CLASS
            default: standard
          - name: CA_IMAGE
            default: hyperledger/fabric-ca
          - name: CA_IMAGE_LABEL
            default: 1.5.4
          - name: FABRIC_CA_VERSION
            default: 1.5.4
          - name: ORG0_CA_CERT
            default: xyzzy
          - name: ORDERER_IMAGE
            default: hyperledger/fabric-orderer
          - name: ORDERER_IMAGE_LABEL
            default: 2.4.4
          - name: PEER_IMAGE
            default: ghcr.io/hyperledgendary/k8s-fabric-peer
          - name: PEER_IMAGE_LABEL
            default: v0.6.0

      steps:
        - - name: fetch-cert
            inline:
              script:
                image: localhost:5000/stepper
                command: [bash]
                source: |
                  kubectl -n test-network get cm/org{{inputs.parameters.orgnum}}-ca-connection-profile -o json | jq -r .binaryData.\"profile.json\" | base64 -d | jq -r .tls.cert

        - - name: start-peer
            inline:
              resource:
                action: apply
                successCondition: status.type == Deployed
                manifest: |
                  apiVersion: ibp.com/v1beta1
                  kind: IBPPeer
                  metadata:
                    name: org{{inputs.parameters.orgnum}}-{{inputs.parameters.peer}}
                  spec:
                    version: "{{inputs.parameters.FABRIC_VERSION}}"
                    domain: "{{inputs.parameters.INGRESS_DOMAIN}}"
                    peerExternalEndpoint: "test-network-org{{inputs.parameters.orgnum}}-{{inputs.parameters.peer}}-peer.{{inputs.parameters.INGRESS_DOMAIN}}:443"
                    license:
                      accept: true
                    action:
                      enroll: {}
                      reenroll: {}
                    configoverride:
                      peer:
                        keepalive:
                          minInterval: 61s
                    customNames:
                      pvc: {}
                    images:
                      peerInitImage: {{inputs.parameters.INIT_IMAGE}}
                      peerInitTag: {{inputs.parameters.INIT_IMAGE_LABEL}}
                      peerImage: {{inputs.parameters.PEER_IMAGE}}
                      peerTag: {{inputs.parameters.PEER_IMAGE_LABEL}}
                      grpcwebImage: ghcr.io/hyperledger-labs/grpc-web
                      grpcwebTag: latest
                    mspID: Org{{inputs.parameters.orgnum}}MSP
                    mspSecret: org{{inputs.parameters.orgnum}}-{{inputs.parameters.peer}}-secret
                    secret:
                      enrollment:
                        component:
                          caname: ca
                          cahost: "test-network-org{{inputs.parameters.orgnum}}-ca-ca.{{inputs.parameters.INGRESS_DOMAIN}}"
                          caport: "443"
                          catls:
                            cacert: "{{steps.fetch-cert.outputs.result}}"
                          enrollid: "{{inputs.parameters.peer}}"
                          enrollsecret: "{{inputs.parameters.peer}}pw"
                        tls:
                          caname: tlsca
                          cahost: "test-network-org{{inputs.parameters.orgnum}}-ca-ca.{{inputs.parameters.INGRESS_DOMAIN}}"
                          caport: "443"
                          catls:
                            cacert: "{{steps.fetch-cert.outputs.result}}"
                          enrollid: "{{inputs.parameters.peer}}"
                          enrollsecret: "{{inputs.parameters.peer}}pw"
                          csr:
                            hosts:
                              - "org{{inputs.parameters.orgnum}}-{{inputs.parameters.peer}}"
                              - "org{{inputs.parameters.orgnum}}-{{inputs.parameters.peer}}.{{inputs.parameters.KUBE_DNS_DOMAIN}}"
                    chaincodeBuilderConfig:
                      peername: org{{inputs.parameters.orgnum}}-{{inputs.parameters.peer}}
                    service:
                      type: ClusterIP
                    stateDb: leveldb
                    storage:
                      peer:
                        class: "{{inputs.parameters.STORAGE_CLASS}}"
                        size: 5G
                      statedb:
                        class: "{{inputs.parameters.STORAGE_CLASS}}"
                        size: 10Gi
                    resources:
                      init:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M
                      peer:
                        limits:
                          cpu: 500m
                          memory: 1G
                        requests:
                          cpu: 10m
                          memory: 10M
                      proxy:
                        limits:
                          cpu: 100m
                          memory: 200M
                        requests:
                          cpu: 10m
                          memory: 10M